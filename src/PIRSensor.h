//----------------------------------------------------------
// Test passive infrared presence sensor
//
// Dean Gienger, March 1, 2024
//
// PIR sensor is a small (about 1" square) sensor board with
// a half-spherical white plastic cover over it.  There are three
// leads - GND, VCC, and OUT
//
// There is an AM312 model that runs on 3.3V and an HC-SR501 that
// runs on 5V.   The AM312 has the half-dome on the end of the board
// the HC-SR501 has the some flat on the board.
//
// When the PIR sensor detects a presence - meaning it detects the
// heat generated by a warm body within it's range, it will set the
// output "open" - so if you have a pull-up resistor, the waveform will
// be at 0v when nothing is detected and 3.3v when something is detected.
//
// You can set the pin-mode for the GPIO pin connected to the PIR output
// to mode INPUT_PULLUP for this purpose, or you can use an external pull-up
// resistor.  That way even for 5V VCC it is compatible with 3.3V inputs
// on the ESP32
//
// Pulse goes high sometimes for a very short time - maybe 5-10us - so you can't poll
// it, you need to interrupt on rising edge.
//
// Credit: Rui Santos, randomnerdtutorials.com
//
// V1.0 - initial release
// V1.1 - deactivate on destruct
// --------------

class PIRSensor
{
  public:
    //--- Constructor ---
    PIRSensor(int gpiopin);
    ~PIRSensor() { deactivate(); }
    
    //--- millis() time when we last triggered, 0 means none
    unsigned long lastTriggerTime() { return trigTime; }
    
    // true if we triggered with the last xms
    int triggeredWithin(unsigned long xms);
    
    // how many times it triggered since last time we checked by calling currentTriggers
    unsigned long currentTriggers();
    
    int activate();
    
    int deactivate();

    int trigCount() { return triggerCount; }
    
  private:
    void ARDUINO_ISR_ATTR isr() { triggerCount++; trigTime = millis(); }
    int gpioPin;
    unsigned long triggerCount;
    unsigned long trigTime;
    unsigned long lastReadTriggerCount; // trigger count last time we checked
};
