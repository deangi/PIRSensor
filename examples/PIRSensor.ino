//----------------------------------------------------------
// Test passive infrared presence sensor
//
// Dean Gienger, March 1, 2024
//
// PIR sensor is a small (about 1" square) sensor board with
// a half-spherical white plastic cover over it.  There are three
// leads - GND, VCC, and OUT
//
// There is an AM312 model that runs on 3.3V and an HC-SR501 that
// runs on 5V.   The AM312 has the half-dome on the end of the board
// the HC-SR501 has the some flat on the board.
//
// When the PIR sensor detects a presence - meaning it detects the
// heat generated by a warm body within it's range, it will set the
// output "open" - so if you have a pull-up resistor, the waveform will
// be at 0v when nothing is detected and 3.3v when something is detected.
//
// You can set the pin-mode for the GPIO pin connected to the PIR output
// to mode INPUT_PULLUP for this purpose, or you can use an external pull-up
// resistor.  That way even for 5V VCC it is compatible with 3.3V inputs
// on the ESP32
//
// Pulse goes high for a very short time - maybe 5-10us - so you can't poll
// it, you need to interrupt on rising edge.
//
// Credit: Rui Santos, randomnerdtutorials.com
//

#include <Arduino.h>
#include "PIRSensor.h"

#define PIRPIN 19
#define LEDPIN 2

#define timeSeconds 10
// Timer: Auxiliary variables
unsigned long now = millis();
unsigned long lastTrigger = 0;
boolean startTimer = false;
boolean motion = false;

// Checks if motion was detected, sets LED HIGH and starts a timer
void IRAM_ATTR pirRisingEdgeIsr() {
  digitalWrite(LEDPIN, HIGH);
  startTimer = true;
  lastTrigger = millis();
}

PIRSensor pir(PIRPIN);

void setup() 
{
  Serial.begin(115200);
  Serial.println("\nPIR sensor test\n");
  pinMode(LEDPIN,OUTPUT);
  digitalWrite(LEDPIN,HIGH);
  pir.activate();
}

void loop() 
{
  delay(500);

  Serial.print("trigTime "); Serial.print(pir.lastTriggerTime());
  Serial.print(", trigCount "); Serial.println(pir.trigCount());
  
}
